package com.creditease.ns.log;

import ch.qos.logback.classic.LoggerContext;
import ch.qos.logback.classic.joran.JoranConfigurator;
import ch.qos.logback.core.joran.spi.JoranException;
import com.creditease.ns.log.spi.FuqianlaLogger;
import org.slf4j.LoggerFactory;

import java.net.URL;

public class FuqianlaLoggerTest {
	public static void main(String[] args) 
	{
		URL url = Thread.currentThread().getContextClassLoader().getResource("joran_test.xml");
		
		//加载配置文件 然后获取logger 打印日志
		LoggerContext context = (LoggerContext) LoggerFactory.getILoggerFactory();

		try {
			JoranConfigurator configurator = new JoranConfigurator();
			configurator.setContext(context);
			// Call context.reset() to clear any previous configuration, e.g. default 
			// configuration. For multi-step configuration, omit calling context.reset().
			context.reset(); 
			configurator.doConfigure(url.getPath());
		} catch (JoranException je) {
			// StatusPrinter will handle this
			je.printStackTrace();
			return;
		}
		//创建一个Logger
		//设置要打印的关键值
		FuqianlaLogger simpleLogger = FuqianlaLogger.getLoggerSetting();
		simpleLogger.setOrderId("batchidDemp").setStatus("1").setCompleteTime("时间");
		//打印日志
		FuqianlaLogger.log("付钱啦异步流水处理", "开始处理");
		
		
		//再第二个步骤打印日志
		FuqianlaLogger simpleLogger2 = FuqianlaLogger.getLoggerSetting();
		FuqianlaLogger.log("付钱啦订单处理", "处理订单中\n订单信息为\r\n订单控制\r风险控制");
		//在最后一个步骤打印日志
		FuqianlaLogger.log("付钱啦异常处理", "开始处理异常\n异常信息开始\r\n异常信息打印\r处理异常");
		//防止线程重用，必须做这一步，否则可能会出现打印混乱的情况
		FuqianlaLogger.reset();
		
		//再次使用同样的线程时
		FuqianlaLogger simpleLogger3 = FuqianlaLogger.getLoggerSetting();
		simpleLogger3.setOrderId("batchidDempNew").setAmount("channelMerchantIdDemoNew").setBizTp("channelNameDemoNew")
			.setMerchId("merchantIDDemoNew").setClientIp("channelMSMMSMSM");
		FuqianlaLogger.log("付钱啦用户开户", "开始用户开户\n开户信息是\r\n用户信息开户\r处理用户");
		//回收资源，必须
		FuqianlaLogger.reset();
		
		System.out.println(context.getProperty("ISUSEREDISIDGENERATOR"));
	}
	
}
